use sales; -- Database name 

-- DATA CLEANING

-- 1. Checking data types of columns
describe transactions;  -- data types are fine


-- Looking for null value in the dataset

select *  from transactions
where concat_ws(',', sales_qty,sales_amount, product_code, order_date, market_code, customer_code,currency,cost_price) like '%null%' or
concat_ws(',', sales_qty,sales_amount, product_code, order_date, market_code, customer_code,currency,cost_price) = ' ';

-- No null value found


-- Looking for duplicates in the dataset

select product_code, customer_code, market_code, order_date, sales_qty, sales_amount, currency, count(*)
from transactions
group by product_code, customer_code, market_code, order_date, sales_qty, sales_amount, currency
having count(*) > 1
order by order_date;

-- there is not any duplicate value in the dataset


-- Removing non-sensical data or outliers

delete  FROM sales.transactions
where sales_amount < 1;


-- Standardizing the data (converting usd to inr)

update transactions
set sales_amount =   sales_amount * 65  -- inr usd rate was 65 at that time
where currency = 'USD';



-- DATA MANIPULATION

-- since sales and cost both are available I will calculate profit and profit_margin 

alter table transactions
add column profit decimal(10,2), add column  profit_margin_percent decimal(10,2);

update transactions
set profit = ROUND((normalized_amount - cost_price), 2) ,
 profit_margin_percent  = truncate((profit/normalized_amount)*100, 2) ;


-- DATA ANALYSIS

-- Total transactions till now

SELECT COUNT(*) FROM transactions;

-- Revenue by year

SELECT YEAR(order_date) Year, SUM(normalized_amount) Revenue FROM transactions
GROUP BY YEAR(order_date) 
ORDER BY YEAR(order_date) DESC;


-- Monthly trend

SELECT MONTH(order_date) Month, SUM(normalized_amount) Revenue FROM transactions
Where year(order_date) = 2020
GROUP BY MONTH(order_date) 
ORDER BY MONTH(order_date) ASC;


-- Sales Quantity and Revenue

SELECT markets_name as Market, SUM(normalized_amount) Revenue, SUM(sales_qty) `Sales Quantity`
FROM transactions t
join markets m on
t.market_code = m.markets_Code
GROUP BY market_code;
 

-- Revenue by market (JOIN BY MARKET NAME)

WITH  market_revenue as (
SELECT markets_name as Market, SUM(normalized_amount) Revenue, avg(profit_margin_percent) `Profit Margin %`
FROM transactions t
join markets m on
t.market_code = m.markets_Code
GROUP BY market_code
)
 SELECT Market, Revenue, `Profit Margin %`, rank() over( order by `Profit Margin %` desc) as rnk
 FROM market_revenue
 ORDER BY Revenue DESC;


-- PRODUCT ANALYSIS

-- Distinct product

SELECT DISTINCT(product_code)
FROM transactions;
-- total 338 porducts 


-- Revenue by product (top selling)

SELECT product_code, SUM(normalized_amount) Revenue
FROM transactions
GROUP BY product_code
ORDER BY Revenue DESC
LIMIT 5;


-- Top 5 product by profit and profit margin
SELECT product_code, avg(profit_margin_percent) Profit
FROM transactions
GROUP BY product_code
ORDER BY Profit DESC
LIMIT 5;


-- CUSTOMER ANALYSIS

SELECT COUNT(DISTINCT customer_code)
FROM transactions;
-- 38 customers


-- Top 5 customers

SELECT custmer_name, SUM(normalized_amount) Revenue
FROM transactions t
join customers c on 
t.customer_code = c.customer_code
GROUP BY t.customer_code 
ORDER BY Revenue DESC
LIMIT 5;
